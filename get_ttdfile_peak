#!/bin/bash

# 默认值
default_rrddir=$(dirname "$(readlink -f "$0")")
default_rrdfile="rrd.txt"
default_rrdtool_path="/usr/local/rrdtool/bin/rrdtool"
Binsys=1000
Interval_Time=1
F_Count_Time=86400

# 初始化变量
rrddir="$default_rrddir"
rrdfile="$default_rrdfile"
rrdtool_path="$default_rrdtool_path"
rrd_full_path="$rrddir/$rrdfile"

# 计算时间
calculate_time() {
    Today_time=$(date --date="today" +%F)
    F_Today_time=$(date +%s -d "$Today_time") || {
        echo "错误: 日期解析失败"
        exit 1
    }
    F_Interval_Time=$((Interval_Time * F_Count_Time))
    Start_time=$((F_Today_time - F_Interval_Time))
    End_time=$((F_Today_time - 1))
}

# 显示帮助信息
display_help() {
    cat <<EOF
用法: ./your_script.sh [选项]

选项:
  --rrddir     /-d  <目录>      指定 RRD 文件的目录（默认值: 脚本所在目录）
  --rrdfile    /-f  <文件>      指定 RRD 文件的文件名（默认值: rrd.txt）
  --rrdtool    /-t  <路径>      指定 RRDTool 工具的路径（默认值: /usr/local/rrdtool/bin/rrdtool）
  --Start_time /-S  <开始时间>  统计RRD数据的开始时间
  --End_time   /-E  <结束时间>  统计RRD数据的结束时间
  --help, -h                  显示帮助信息
EOF
}

parse_command_line() {
    while getopts ":d:f:t:S:E:h" option; do
        case "$option" in
            d)
                rrddir="$OPTARG"
                ;;
            f)
                rrdfile="$OPTARG"
                rrd_full_path="$rrddir/$rrdfile"
                ;;
            t)
                rrdtool_path="$OPTARG"
                ;;
            S)
                Start_time="$OPTARG"
                ;;
            E)
                End_time="$OPTARG"
                ;;
            h)
                display_help
                exit 0
                ;;
            \?)
                echo "未知选项: -$OPTARG"
                display_help
                exit 1
                ;;
            :)
                echo "选项 -$OPTARG 需要参数."
                display_help
                exit 1
                ;;
        esac
    done
}

shift $((OPTIND-1))
# 异常检查
perform_checks() {

    if [[ ! -d "$rrddir" ]]; then
        echo "错误: 目录 '$rrddir' 不存在"
        exit 1
    fi

    if [[ ! -f "$rrd_full_path" ]]; then
        echo "错误: 文件 '$rrd_full_path' 不存在"
        exit 1
    fi

    #if [[ ! -x "$rrdtool_path" ]]; then
    if [[ ! -r "$rrdtool_path" ]]; then
        echo "错误: RRDTool 工具 '$rrdtool_path' 不可执行"
        exit 1
    fi
}

# 处理速度单位转换
process_speed() {
    local speed="$1"
    local speed_p=${speed%.*}
    local decimal_part=${speed#*.}
    local unit=""

    local GB=$((Binsys*Binsys*Binsys))
    local MB=$((Binsys*Binsys))
    local KB=$Binsys

    if (( speed_p >= GB )); then
        speed=$(bc <<< "scale=2; $speed / $GB")
        unit="G"
    elif (( speed_p >= MB )); then
        speed=$(bc <<< "scale=2; $speed / $MB")
        unit="M"
    elif (( speed_p >= KB )); then
        speed=$(bc <<< "scale=2; $speed / $KB")
        unit="K"
    else
        speed=$(bc <<< "scale=2; $speed / 1")
        unit="B"
    fi

    echo "$speed$unit"
}

process_data() {
    while IFS= read -r line; do
        fetch_data=$("$rrdtool_path" fetch "$line" AVERAGE --start "$Start_time" --end "$End_time") 

        max_values=$(echo "$fetch_data" | awk 'BEGIN { max_in=0; max_out=0 } /^[0-9]+:/ { in_val=$2*8; out_val=$3*8; if (in_val > max_in) max_in = in_val; if (out_val > max_out) max_out = out_val } END { printf "%.2f %.2f", max_in, max_out }')

        read -r max_in max_out <<< "$max_values"

        max_value=$(echo "$max_in $max_out" | awk '{ if ($1 > $2) print $1; else print $2 }')

        Human_bps_max=$(process_speed "$max_value")
        Human_bps_in=$(process_speed "$max_in")
        Human_bps_out=$(process_speed "$max_out")

        echo "$line Max $Human_bps_max In $Human_bps_in   Out $Human_bps_out"
    done < "$rrd_full_path"
}

# 主要执行部分
main() {
    calculate_time
    parse_command_line "$@"
    perform_checks
    process_data
}

# 执行主要部分
main "$@"
