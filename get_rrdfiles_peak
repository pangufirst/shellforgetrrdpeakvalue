
#!/bin/bash

# Configuration
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
LOG_DIR="$SCRIPT_DIR/logs"
LOG_FILE="$LOG_DIR/script_log_$(date +'%Y-%m-%d').log"
RETAIN_DAYS=30
CONFIG_FILE="$SCRIPT_DIR/config.txt"
#获取时间
today_time=$(date --date="today" +%F)
f_today_time=$(date +%s -d "$today_time")
start_time=$((f_today_time - 86398))
end_time=$((f_today_time - 1))
#echo $start_time
#echo $end_time
# Functions
create_log_directory() {
    if [ ! -d "$LOG_DIR" ]; then
        mkdir -p "$LOG_DIR"
    fi
}

log() {
  local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
  printf "[%s] %s\n" "$timestamp" "$1" >> "$LOG_FILE"
}

#转换为人类可读的单位
to_human_unit() {
    local human_raw_data="$1"
    local human_raw_data_p=${human_raw_data%.*}
    local decimal_part=${human_raw_data#*.}
    local unit=""
    local Binsys="${2:-1000}"
    local scale="${3:-2}"
    local GB=$((Binsys*Binsys*Binsys))
    local MB=$((Binsys*Binsys))
    local KB=$Binsys

    if (( human_raw_data_p >= GB )); then
        human_raw_data=$(bc <<< "scale=2; $human_raw_data / $GB")
        unit="G"
    elif (( human_raw_data_p >= MB )); then
        human_raw_data=$(bc <<< "scale=2; $human_raw_data / $MB")
        unit="M"
    elif (( human_raw_data_p >= KB )); then
        human_raw_data=$(bc <<< "scale=2; $human_raw_data / $KB")
        unit="K"
    else
        human_raw_data=$(bc <<< "scale=2; $human_raw_data / 1")
        unit="B"
    fi

    echo "$human_raw_data$unit"
}

# 数据处理
process_data() {
    local rrd_files=("$@")  # 接受不同数量的RRD文件路径作为参数
    local rrd_def_in=''
    local rrd_def_out=''
    local rrd_cdef_cf_in=''
    local rrd_cdef_cf_out=''
    local rrd_cdef_in=''
    local rrd_cdef_out=''
    local def_cdef=''
    for ((i = 0; i < ${#rrd_files[@]}; i++)); do
        rrd_file="${rrd_files[i]}"
        label_in="a$((i+1))"
        label_out="b$((i+1))"
        #rrd_def_in+="DEF:$label_in=\"$rrd_file\":traffic_in:AVERAGE "
        #rrd_def_out+="DEF:$label_out=\"$rrd_file\":traffic_out:AVERAGE "
        rrd_def+="DEF:$label_in=\"$rrd_file\":traffic_in:AVERAGE DEF:$label_out=\"$rrd_file\":traffic_out:AVERAGE "
        if [ $i -eq 0 ]; then
            #rrd_cdef_cf_in="$label_in"
            rrd_cdef_cf_in="$label_in,UN,0,$label_in,IF"
            #CDEF:sumin=a1,UN,0,a1,IF CDEF:sumout=b1,UN,0,b1,IF 
            #CDEF:suminout=a1,UN,0,a1,IF,b1,UN,0,b1,IF,+ 
            rrd_cdef_cf_out="$label_out,UN,0,$label_out,IF"
        else
            rrd_cdef_cf_in+=",$label_in,UN,0,$label_in,IF,+"
            rrd_cdef_cf_out+=",$label_out,UN,0,$label_out,IF,+"
        fi
    done 
   
    #def_cdef="$rrd_def CDEF:sumin=$rrd_cdef_cf_in CDEF:sumout=$rrd_cdef_cf_out"
    def_cdef="$rrd_def CDEF:sumin=$rrd_cdef_cf_in,8,* CDEF:sumout=$rrd_cdef_cf_out,8,*"
    #xport_data=$(eval rrdtool xport -s $start_time -e $end_time $def_cdef XPORT:sumin:traffic_in XPORT:sumout:traffic_out)
    #xport_data=$(eval rrdtool xport -m 1440 -s $start_time -e $end_time $def_cdef XPORT:sumin:traffic_in XPORT:sumout:traffic_out | sed -nE "s/^[ \t]*<row><t>([0-9]+)<\/t><v>([0-9.e+-]+)<\/v><v>([0-9.e+-]+)<\/v><\/row>[ \t]*$/\1 \2 \3/p")
    xport_data=$(eval rrdtool xport -m 1440 -s $start_time -e $end_time $def_cdef XPORT:sumin:traffic_in XPORT:sumout:traffic_out | sed -nE "s/^[ \t]*<row><t>([0-9]+)<\/t><v>([0-9.e+-]+)<\/v><v>([0-9.e+-]+)<\/v><\/row>[ \t]*$/\1 \2 \3/p")
    #xport_data=$(rrdtool xport -s $start_time -e $end_time "$def_cdef" "XPORT:sumin:\"traffic_in\"" "XPORT:sumout:\"traffic_out\"" | sed -nE "s/^[ \t]*<row><t>[0-9]+<\/t><v>([0-9.e+-]+)<\/v><v>([0-9.e+-]+)<\/v><\/row>[ \t]*$/\1 \2/p")
    #max_values=$(echo "$fetch_data" | awk 'BEGIN { max_in=0; max_out=0 } { in_val=$1*8; out_val=$2*8; if (in_val > max_in) max_in = in_val; if (out_val > max_out) max_out = out_val } END { printf "%.2f %.2f %.2f", (max_in > max_out) ? max_in : max_out, max_in, max_out }')
    max_values=$(echo "$fetch_data" | awk 'BEGIN { max_in=0; max_out=0 } { in_val=$2; out_val=$3; if (in_val > max_in) max_in = in_val; if (out_val > max_out) max_out = out_val } END { printf "%.2f %.2f %.2f", (max_in > max_out) ? max_in : max_out, max_in, max_out }')
    #max_values=$(echo "$fetch_data" | awk 'BEGIN { max_in=0; max_out=0 } { in_val=$1; out_val=$2; if (in_val > max_in) max_in = in_val; if (out_val > max_out) max_out = out_val } END { printf "%.2f %.2f", max_in, max_out }')
    read -r max_value max_in max_out <<< "$max_values" 
    Human_bps_max=$(to_human_unit "$max_value")
    Human_bps_in=$(to_human_unit "$max_in")
    Human_bps_out=$(to_human_unit "$max_out")

    echo "$line Max $Human_bps_max In $Human_bps_in Out $Human_bps_out"
}

get_data_from_config() {
    log "Processing data..."
    while IFS=: read -r key paths; do
        local rrd_files=($paths)
        local data=$(process_data "${rrd_files[@]}")
        echo "$key $data"
    done < "$CONFIG_FILE"
}

# Main
main(){
    create_log_directory
    get_data_from_config
}

cleanup_old_logs() {
  find "$LOG_DIR" -type f -mtime +$RETAIN_DAYS -exec rm {} \;
}
main "$@" 2>&1 | tee -a "$LOG_FILE"
