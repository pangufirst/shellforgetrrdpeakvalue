#!/bin/bash

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
LOG_DIR="$SCRIPT_DIR/logs"
LOG_FILE="$LOG_DIR/script_log_$(date +'%Y-%m-%d').log"
RETAIN_DAYS=30
CONFIG_FILE="$SCRIPT_DIR/config.txt"

# 获取昨天的时间范围
start_time=$(date +%s -d "yesterday 00:00:00")
end_time=$(date +%s -d "yesterday 23:59:59")

# 创建日志目录
mkdir -p "$LOG_DIR"

log() {
  local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
  printf "[%s] %s\n" "$timestamp" "$1" >> "$LOG_FILE"
}

#转换为人类可读单位
to_human_unit() {
  local human_raw_data="$1"
  local human_raw_data_p=${human_raw_data%.*}
  local decimal_part=${human_raw_data#*.}
  local unit=""
  local Binsys="${2:-1000}"
  local scale="${3:-2}"
  local GB=$((Binsys * Binsys * Binsys))
  local MB=$((Binsys * Binsys))
  local KB=$Binsys

  if ((human_raw_data_p >= GB)); then
    human_raw_data=$(awk -v hrd=$human_raw_data -v bsys=$Binsys 'BEGIN { printf "%.2f", hrd / (bsys * bsys * bsys); }')
    unit="G"
  elif ((human_raw_data_p >= MB)); then
    human_raw_data=$(awk -v hrd=$human_raw_data -v bsys=$Binsys 'BEGIN { printf "%.2f", hrd / (bsys * bsys); }')
    unit="M"
  elif ((human_raw_data_p >= KB)); then
    human_raw_data=$(awk -v hrd=$human_raw_data -v bsys=$Binsys 'BEGIN { printf "%.2f", hrd / bsys; }')
    unit="K"
  else
    human_raw_data=$(awk -v hrd=$human_raw_data 'BEGIN { printf "%.2f", hrd / 1; }')
    unit="B"
  fi

  echo "$human_raw_data$unit"
}

process_data() {
  local rrd_files=("$@")
  local rrd_cdef_cf_in=''
  local rrd_cdef_cf_out=''
  local rrd_def=''
  local def_cdef=''

  for ((i = 0; i < ${#rrd_files[@]}; i++)); do
    rrd_file="${rrd_files[i]}"
    label_in="a$((i + 1))"
    label_out="b$((i + 1))"
    rrd_def+="DEF:$label_in=\"$rrd_file\":traffic_in:AVERAGE DEF:$label_out=\"$rrd_file\":traffic_out:AVERAGE "

    if [ $i -eq 0 ]; then
      rrd_cdef_cf_in="$label_in,UN,0,$label_in,IF"
      rrd_cdef_cf_out="$label_out,UN,0,$label_out,IF"
    else
      rrd_cdef_cf_in+=",$label_in,UN,0,$label_in,IF,+"
      rrd_cdef_cf_out+=",$label_out,UN,0,$label_out,IF,+"
    fi
  done

  #def_cdef="$rrd_def CDEF:sumin=$rrd_cdef_cf_in CDEF:sumout=$rrd_cdef_cf_out"
  def_cdef="$rrd_def CDEF:sumin=$rrd_cdef_cf_in,8,* CDEF:sumout=$rrd_cdef_cf_out,8,*"
  #xport_data=$(eval rrdtool xport -s $start_time -e $end_time $def_cdef XPORT:sumin:traffic_in XPORT:sumout:traffic_out)
  #xport_data=$(eval rrdtool xport -m 1440 -s $start_time -e $end_time $def_cdef XPORT:sumin:traffic_in XPORT:sumout:traffic_out | sed -nE "s/^[ \t]*<row><t>([0-9]+)<\/t><v>([0-9.e+-]+)<\/v><v>([0-9.e+-]+)<\/v><\/row>[ \t]*$/\1 \2 \3/p")
  xport_data=$(eval rrdtool xport -m 1440 -s $start_time -e $end_time $def_cdef XPORT:sumin:traffic_in XPORT:sumout:traffic_out | sed -nE "s/^[ \t]*<row><t>([0-9]+)<\/t><v>([0-9.e+-]+)<\/v><v>([0-9.e+-]+)<\/v><\/row>[ \t]*$/\1 \2 \3/p")
  #xport_data=$(rrdtool xport -s $start_time -e $end_time "$def_cdef" "XPORT:sumin:\"traffic_in\"" "XPORT:sumout:\"traffic_out\"" | sed -nE "s/^[ \t]*<row><t>[0-9]+<\/t><v>([0-9.e+-]+)<\/v><v>([0-9.e+-]+)<\/v><\/row>[ \t]*$/\1 \2/p")
  #max_values=$(echo "$xport_data" | awk 'BEGIN { max_in=0; max_out=0 } { in_val=$1*8; out_val=$2*8; if (in_val > max_in) max_in = in_val; if (out_val > max_out) max_out = out_val } END { printf "%.2f %.2f %.2f", (max_in > max_out) ? max_in : max_out, max_in, max_out }')
  max_values=$(echo "$xport_data" | awk 'BEGIN { max_in=0; max_out=0 } { in_val=$2; out_val=$3; if (in_val > max_in) max_in = in_val; if (out_val > max_out) max_out = out_val } END { printf "%.2f %.2f %.2f", (max_in > max_out) ? max_in : max_out, max_in, max_out }')
  #max_values=$(echo "$xport_data" | awk 'BEGIN { max_in=0; max_out=0 } { in_val=$1; out_val=$2; if (in_val > max_in) max_in = in_val; if (out_val > max_out) max_out = out_val } END { printf "%.2f %.2f", max_in, max_out }')
  read -r max_value max_in max_out <<<"$max_values"
  Human_bps_max=$(to_human_unit "$max_value")
  Human_bps_in=$(to_human_unit "$max_in")
  Human_bps_out=$(to_human_unit "$max_out")

  echo "$line Max $Human_bps_max In $Human_bps_in Out $Human_bps_out"
}

get_data_from_config() {
  log "Processing data..."
  local children=() # 用于存储子进程的ID
  while IFS=':' read -r key paths; do
    local rrd_files=($paths)
    # 将配置项的处理放在子进程中
    (process_data "${rrd_files[@]}";) &
    children+=($!) # 将子进程的ID存入数组

  done <"$CONFIG_FILE"

  # 等待所有子进程执行完毕
  for child in "${children[@]}"; do
    wait "$child"
  done
}

main() {
  # 创建日志目录
  mkdir -p "$LOG_DIR"

  get_data_from_config
}

cleanup_old_logs() {
  find "$LOG_DIR" -type f -mtime +$RETAIN_DAYS -delete
}

main "$@" 2>&1 | tee -a "$LOG_FILE"
cleanup_old_logs
