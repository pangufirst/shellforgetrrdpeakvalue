#!/bin/bash

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
LOG_DIR="$SCRIPT_DIR/logs"
LOG_FILE="$LOG_DIR/script_log_$(date +'%Y-%m-%d').log"
RETAIN_DAYS=30
CONFIG_FILE="$SCRIPT_DIR/config.txt"

# 获取昨天的时间范围
start_time=$(date +%s -d "yesterday 00:00:00")
end_time=$(date +%s -d "yesterday 23:59:59")

# 创建日志目录
if [ ! -d "$LOG_DIR" ]; then
    mkdir -p "$LOG_DIR"
fi

log() {
  printf "[%s] %s\n" "$(date +'%Y-%m-%d %H:%M:%S')" "$1" >> "$LOG_FILE"
  #local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
  #printf "[%s] %s\n" "$timestamp" "$1" >> "$LOG_FILE"
}

process_data() {
  local rrd_files=("$@")
  local rrd_cdef_cf_in=''
  local rrd_cdef_cf_out=''
  local rrd_def=''
  local def_cdef=''

  for ((i = 0; i < ${#rrd_files[@]}; i++)); do
    rrd_file="${rrd_files[i]}"
    label_in="a$((i + 1))"
    label_out="b$((i + 1))"
    rrd_def+="DEF:$label_in=$rrd_file:traffic_in:AVERAGE DEF:$label_out=$rrd_file:traffic_out:AVERAGE "
    #rrd_def+="DEF:$label_in=$rrd_file:traffic_in:MAX DEF:$label_out=$rrd_file:traffic_out:MAX "

    if [ $i -eq 0 ]; then
      rrd_cdef_cf_in="$label_in,UN,0,$label_in,IF"
      rrd_cdef_cf_out="$label_out,UN,0,$label_out,IF"
    else
      rrd_cdef_cf_in+=",$label_in,UN,0,$label_in,IF,+"
      rrd_cdef_cf_out+=",$label_out,UN,0,$label_out,IF,+"
    fi
  done

#  rrdtool graph /dev/null -s $start_time -e $end_time --width=500 \
#    $rrd_def CDEF:sumin=$rrd_cdef_cf_in,8,* CDEF:sumout=$rrd_cdef_cf_out,8,* CDEF:maxinout=sumin,sumout,GT,sumin,sumout,IF \
#    PRINT:maxinout:MAX:"%0.2lf%s" PRINT:sumin:MAX:"%0.2lf%s" PRINT:sumout:MAX:"%0.2lf%s" | awk 'NR == 2 {maxinout=$1} NR == 3 {sumin=$1} NR == 4 {sumout=$1} END {print maxinout sumin, sumout}'
  rrdtool_output=$(rrdtool graph /dev/null -s $start_time -e $end_time --height=10 --width=500 --alt-autoscale \
    $rrd_def CDEF:sumin=$rrd_cdef_cf_in,8,* CDEF:sumout=$rrd_cdef_cf_out,8,* CDEF:maxinout=sumin,sumout,GT,sumin,sumout,IF \
    PRINT:maxinout:MAX:"%0.2lf%s" PRINT:sumin:MAX:"%0.2lf%s" PRINT:sumout:MAX:"%0.2lf%s" 2>&1 | grep -v "0x0")
  #rrdtool_output=$(echo -e "$rrdtool_output" | tr '\n' ' ')
  #rrdtool_output=$(echo "$rrdtool_output" | awk 'ORS=" "')
  #rrdtool_output=$(echo "$rrdtool_output" | awk 'BEGIN {ORS = ""} NR > 1 {print " "} {print} END {if (NR) print ""}')
  #rrdtool_output=$(echo "$rrdtool_output" | awk '{printf "%s ", $0}')
  rrdtool_output=$(echo "$rrdtool_output" | awk '{printf "%s%s", sep, $0; sep=" "}')
  echo "$rrdtool_output"
}

get_data_from_config() {
  log "Processing data..."
  local children=() # 用于存储子进程的ID
  while IFS=':' read -r key paths; do
    local rrd_files=($paths)
    # 将配置项的处理放在子进程中
    (result=$(process_data "${rrd_files[@]}"); echo "$key $result") &
    children+=($!) # 将子进程的ID存入数组

  done <"$CONFIG_FILE"

  # 等待所有子进程执行完毕
  for child in "${children[@]}"; do
    wait "$child"
  done
}

main() {
  get_data_from_config
}

cleanup_old_logs() {
  #find "$LOG_DIR" -type f -mtime +$RETAIN_DAYS -delete
  find "$LOG_DIR" -type f -mtime +$RETAIN_DAYS -exec rm {} +
}

main "$@" 2>&1 | tee -a "$LOG_FILE"
cleanup_old_logs
